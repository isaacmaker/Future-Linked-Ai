"global Ai\nglobal qustion\nglobal chatbox\nglobal label\nglobal input_field\nglobal starting\nstarting = 0\nchats = []\nlabel = 0\ninput_field = 0\nimport tkinter as tk\nfrom tkinter import END\nfrom tkinter import Tk\nfrom tkinter import filedialog\nfrom tkinter import messagebox\nimport json\ntry:\n    print(\"verson online\")\n    import urllib.request, json\n    with urllib.request.urlopen(\"https://raw.githubusercontent.com/isaacmaker/Future-Linked-Ai/main/verson.json\") as url2:\n        data = json.load(url2)\n        verson = data[\"verson\"]\n        chats.append(\"                                                Future Linked\")\n        chats.append(\"                                  \"+data[\"new\"])\n        chats.append(\"                                            \"+data[\"update\"])\n        with open(\"verson.json\",\"w\") as v:\n            json.dump(data,v)\n            print(\"saved\")\nexcept:\n    with open(\"verson.json\",\"r\") as v:\n        data = json.load(v)\n        verson = data[\"verson\"]\n        chats.append(\"    \")\n        chats.append(data[\"new\"])\n        chats.append(data[\"update\"])\n        print(\"verson not updated\")\n\ntry:\n    import vlc\n    p = vlc.MediaPlayer(\"\\python\\sound.mp3\")\n    p.play()\nexcept:\n    print(\"no vlc\")\n# Create a new window\nwindow = tk.Tk()\n# Set the window title\n#sets window icon\n#with open(\"D:\\python\\future Linked Ai\\icon_future linked.ico\",\"r+\") as icon:\nwindow.iconbitmap(\"python\\icon_future linked.ico\")\n#playsound.playsound(\"sound.mp3\")\n# Set the window size\nwindow.geometry(\"398x670\")\nwindow.maxsize(398,670)\n#this part does the answering\nimport time\nimport json\nimport random\nAi = {}\ntry:\n    print(\"online\")\n    import urllib.request, json\n    with urllib.request.urlopen(\"https://raw.githubusercontent.com/isaacmaker/Future-Linked-Ai/main/Ai.json\") as url:\n        Ai = json.load(url)\n        with open(\"python\\Ai.json\",\"w\") as path_file:\n            json.dump(Ai,path_file)\n            print(\"Ai saved\")\nexcept:\n    try:\n        verson = \"[not online] \" + verson\n        with open(\"python\\Ai.json\",\"r\") as path_file:\n            Ai = json.load(path_file)\n    except:\n        print(\"no file\")\n        window.quit()\nwindow.title(\"Future Linked \"+verson)\nGreatings = [\"is there any thing else i can help you with?\",\"If you Liked that answer ask me something else\",\"hi my name is Future Linked Ai how can i help you\"]\n# Open an image file\n#with Image.open('background.png') as im:\n    # Create a PhotoImage object\n #   photo = ImageTk.PhotoImage(im)\n\n    # Create a label widget\n  #  backg = tk.Label(window, image=photo)\n\n    # Set the label widget as the window's main widget\n   # backg.grid(column=0,row=0,rowspan=1,columnspan=1)\n\nbackground = tk.Label(window,bg=\"black\",fg=\"grey\",width=53,height=43,border=20,borderwidth=12,relief=\"sunken\")\nbackground.grid(row=0,column=0,rowspan=15)\ndef clear():\n    global input_field\n    global enter\n    global answer_label\n    global label\n    try:\n        label.destroy()\n\n        enter.destroy()\n        input_field.destroy()\n #   except:\n        #print(\"not there\")\n        #global qustion_button\n        #qustion_button = tk.Button(window,text=\"question\",command=setup,bg=\"grey\",width=15)\n        #ustion_button.bind(\"<>\",setup)\n        #qustion_button.grid(column=0,row=3)\n        setup(\"answered q\")\n    except:\n        print(\"fail clear\")\ndef updaten_answer_defs():\n        answer = input_field.get()\n        Ai.update({qustion: answer})\n        print(Ai)\n        with open(\"\\python\\Ai.json\",'w') as f:\n            json.dump(Ai,f)\n        time.sleep(1)\n        clear()\n\ndef ask(enter1):\n    print(enter1)\n    try:\n        enter_sound = vlc.MediaPlayer(\"\\python\\enter sound.mp3\")\n        enter_sound.play()\n    except:\n       print(\"no vlc\")\n    global qustion_button\n    global label\n    global qustion\n    global chatbox\n    global answer_label\n    try:\n        qustion_button.destory()\n        answer_label.destory()\n    except:\n        print(\"no button to clear\")\n\n    qustion = input_field.get()\n    chats.append(\"you:  \"+qustion)\n    #dot_lenth = 0\n    #dot_list = [\".\",\"..\",\"...\"]\n    #qustion= input(\"how how can i help you: \")\n    #for a in range(3):\n    #if dot_lenth == 4:\n     #   print(\"True\")\n      #  dot_lenth == 0\n    #dot_lenth =+ 1\n    #print(dot_lenth)\n     #   dot = dot_list[a]\n    #print(f\"{dot}\", end=\"\\r\")\n    #time.sleep(0.2)\n    if qustion in Ai:\n        global chatbox\n        print(Ai.get(qustion))\n        answer_label = tk.Label(window,text=Ai.get(qustion),fg=\"white\",bg=\"black\")\n        answer_label.grid(row=2,column=0,)\n        chats.append(\"Ai:  \"+Ai.get(qustion))\n        print(chats)\n        try:\n            chatbox.destroy()\n            chatbox = tk.Listbox(window,width=58,height=35,background=\"grey\",border=4,)\n            chatbox.grid(row=0,column=0)\n        except:\n            print(\"cant find anything in the list\")\n        try:\n            for item in chats:\n                chatbox.insert(tk.END, item)\n                print(\"added\")\n        except:\n            print(\"nothing in list\")\n        clear()\n    else:\n        #global enter\n        #global label\n        #qustion = input_field.get()\n        #input_field.delete(0, END)\n        #label.destroy()\n        #enter.destroy()\n        #label = tk.Label(window,text=\"what is the answer?\",bg=\"black\",fg=\"white\")\n        #label.grid(row=1,column=0)\n        #enter = tk.Button(window,text=\"Enter\",command=lambda: ask(\"hello\"))\n        #enter.bind(\"<Return>\",ask)\n        #enter.grid(row=4,column=0)\n        add_qustion = messagebox.askquestion(\"no answer\",\"would you like to add an answer\",icon='warning')\n        if add_qustion == \"yes\":\n            import futureLinkedadim\n            futureLinkedadim.update_online(qustion)\n        else:\n            clear()\n\n        setup(\"hello\")\n\ndef clear_chatbox():\n    global chats\n    global chatbox\n    chats = []\n    chatbox.destroy()\n    chatbox = tk.Listbox(window,width=58,height=35,background=\"grey\",border=4,)\n    chatbox.grid(row=0,column=0)\n    for item in chats:\n        chatbox.insert(tk.END, item)\n        print(\"added\")\n\n        \ndef setup(hello):\n        print(hello)\n        global starting\n        global chatbox\n #       try:\n  #          for item in chats:\n   #             chatbox.delete()\n    #            chatbox.insert(tk.END, item)\n     ##  except:\n       #     print(\"nothing in list\")\n        global label\n        global enter\n        global input_field\n        # Add a label to the window\n        try:\n            qustion_button.destroy()\n            answer_label.destroy()\n        except:\n            print(\"no answer to clear\")\n        if starting == 0:\n            label = tk.Label(window, text=\"Welcome, how can i help you?\",bg=\"black\",fg=\"white\",border=8,borderwidth=4,)\n            label.grid(row=1,column=0)\n        elif starting == 1:\n            greet_lenth = len(Greatings)\n            greet_str = random.randint(0,greet_lenth-1)\n            label = tk.Label(window, text=Greatings[greet_str],bg=\"black\",fg=\"white\",border=8,borderwidth=4,)\n            label.grid(row=1,column=0)\n        clear_button = tk.Button(window,text=\"clear\",command=clear_chatbox,width=7,bg=\"grey\")\n        clear_button.grid(row=4,column=0)            \n\n\n    # Add an input field to the window\n        input_field = tk.Entry(window,width=30,highlightcolor=\"blue\",relief=\"sunken\",border=2,bg=\"grey\")\n        input_field.grid(row=2,column=0)\n        enter = tk.Button(window,text=\"Enter\",command=lambda: ask(\"hello\"),bg=\"grey\",width=10)\n        input_field.bind(\"<Return>\",ask)\n        input_field.select_to\n        enter.grid(row=3,column=0)\n        starting = 1\n        window.mainloop()\nchatbox = tk.Listbox(window,width=58,height=35,background=\"grey\",border=4,)\nchatbox.grid(row=0,column=0)\nfor item in chats:\n    chatbox.insert(tk.END, item)\n    print(\"added\")\n\nsetup(\"hello\")\n    # Run the window"